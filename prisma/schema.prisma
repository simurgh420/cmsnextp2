// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL")
}
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

enum Status {
  ACTIVE
  INACTIVE
}
enum CommentStatus {
  PENDING   // در انتظار تأیید
  APPROVED  // تأیید شده
  REJECTED  // رد شده
}

model Product {
  id        String   @id @default(cuid())
  name      String   // نام محصول (از mock)
  price     Float    // قیمت (number)
  status    Status   @default(ACTIVE)  // enum: active/inactive
  image     String?  // URL عکس (optional)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    categoryId   String?
    category   Category? @relation(fields: [categoryId], references: [id])
  @@map("products")
  @@index([categoryId])
  comments Comment[]
  orders Order[]
}
model Category{
  id String @id @default(cuid())
  name String
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
 @@map("categories")

}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  userId    String?        // Clerk userId
  productId String?
  product   Product?       @relation(fields: [productId],references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
model Order {
  id        String   @id @default(cuid())
  userId    String   // از Clerk
  productId String
  quantity  Int
  status    OrderStatus   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  product   Product @relation(fields: [productId], references: [id])

  
}